import json
import boto3
from botocore.exceptions import ClientError
from exceptions import CustomErrors
import datetime
import config

s3_client = boto3.client("s3",
                         region_name=config.REGION_NAME,
                         aws_access_key_id=config.AWS_ACCESS_KEY,
                         aws_secret_access_key=config.AWS_SECRET_ACCESS_KEY)


def request_s3_key(key):
    """
    Parameters
    ----------
    key : str
        path that is to be requested as an S3 key

    Returns
    -------
    response : str
        S3 key
    """

    try:

        response = s3_client.generate_presigned_post(Bucket=config.BUCKET,
                                                     Key=key,
                                                     ExpiresIn=3600)
        url = response["url"]
        data = response["fields"]

        return url, data

    except ClientError as error:
        raise error


def generate_keys(user_id, media, farm_id=None):
    """
    Parameters
    ----------
    user_id : int
        user's id who is requesting for S3 keys
    media : list
        dictionary of image and audio paths
    farm_id: int
        id associated with farm
    Returns
    -------
    response_payload : dict
        a dictionary of S3 keys
    """

    s3_keys = dict()
    keys = list(dict.keys(media))

    for ind, dict_key in enumerate(keys):
        files = media[dict_key]
        response = list()
        if dict_key == "farms":
            if len(files) > 0:
                for file in files:
                    file_name = '_'.join(
                        [str(user_id), str(farm_id), '-'.join(str(datetime.datetime.utcnow()).split(' '))]) \
                            + "." + file.split('.')[-1]
                    key = dict_key + '/' + file_name
                    s3_data = dict()

                    url, data = request_s3_key(key)
                    key = data["key"]

                    s3_data["url"] = url
                    s3_data["data"] = data
                    s3_data["key"] = key
                    response.append(s3_data)
        else:
            if len(files) > 0:
                for ind, file in enumerate(files):
                    file_name = '_'.join(
                        [str(user_id), '-'.join(str(datetime.datetime.utcnow()).split(' ')), str(ind)]) + "." + \
                                file.split('.')[-1]
                    key = dict_key + '/' + file_name
                    s3_data = dict()

                    url, data = request_s3_key(key)
                    key = data["key"]

                    s3_data["url"] = url
                    s3_data["data"] = data
                    s3_data["key"] = key
                    response.append(s3_data)

        s3_keys[dict_key] = response

    return s3_keys


def generate_url(key):
    """
    Parameters
    ----------
    key : str
        the S3 key associated with a media file

    Returns
    -------
    response_payload : str
        a url for easy access, generated by S3 for the media file
    """

    try:
        response = s3_client.generate_presigned_url('get_object',
                                                    Params={'Bucket': config.BUCKET, 'Key': key},
                                                    ExpiresIn=604800)
        return response

    except ClientError as error:
        raise error


def language_file(file):
    """
    Parameters
    ----------
    file : str
        json file name associated with s3 bucket

    Returns
    -------
    language file
    """
    response = s3_client.get_object(Bucket=config.BUCKET, Key=file)
    data = response['Body']
    lang_file = json.loads(data.read())
    return lang_file


def generate_cog_tif_key(user_id, farm_id, file):
    """
    Parameters
    ----------
    user_id : int
        user's id who is requesting for S3 keys
    farm_id : int
        id associated with farm
    file:
        cogtiff file

    Returns
    -------
         S3 keys
    """
    if file:
        file_name = '_'.join([str(user_id), str(farm_id), '-'.join(str(datetime.datetime.utcnow()).split(' '))]) \
                    + "." + 'tif'
        key = 'cog' + '/' + file_name
        s3_data = dict()
        url, data = request_s3_key(key)
        key = data["key"]
        s3_data["url"] = url
        s3_data["data"] = data
        s3_data["key"] = key
    return s3_data
